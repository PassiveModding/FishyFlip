// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable

using FishyFlip.Lexicon.Com.Atproto.Repo;

namespace FishyFlip.Lexicon.App.Bsky.Feed
{

    /// <summary>
    /// Extension methods for app.bsky.feed.
    /// </summary>
    public static class ATProtoFeedExtensions
    {

        /// <summary>
        /// Create a Generator record.
        /// </summary>
        public static Task<Result<CreateRecordOutput?>> CreateGeneratorRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, App.Bsky.Feed.Generator record, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.CreateRecordAsync(repo, "app.bsky.feed.generator", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Delete a Generator record.
        /// </summary>
        public static Task<Result<DeleteRecordOutput?>> DeleteGeneratorRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, string rkey, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.DeleteRecordAsync(repo, "app.bsky.feed.generator", rkey, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Put a Generator record.
        /// </summary>
        public static Task<Result<PutRecordOutput?>> PutGeneratorRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, string rkey, App.Bsky.Feed.Generator record, bool? validate = default, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.PutRecordAsync(repo, "app.bsky.feed.generator", rkey, record, validate, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// List Generator records.
        /// </summary>
        public static Task<Result<ListRecordsOutput?>> ListGeneratorRecordsAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ListRecordsAsync(repo, "app.bsky.feed.generator", limit, cursor, reverse, cancellationToken);
        }
        /// <summary>
        /// Create a Like record.
        /// </summary>
        public static Task<Result<CreateRecordOutput?>> CreateLikeRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, App.Bsky.Feed.Like record, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.CreateRecordAsync(repo, "app.bsky.feed.like", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Delete a Like record.
        /// </summary>
        public static Task<Result<DeleteRecordOutput?>> DeleteLikeRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, string rkey, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.DeleteRecordAsync(repo, "app.bsky.feed.like", rkey, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Put a Like record.
        /// </summary>
        public static Task<Result<PutRecordOutput?>> PutLikeRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, string rkey, App.Bsky.Feed.Like record, bool? validate = default, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.PutRecordAsync(repo, "app.bsky.feed.like", rkey, record, validate, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// List Like records.
        /// </summary>
        public static Task<Result<ListRecordsOutput?>> ListLikeRecordsAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ListRecordsAsync(repo, "app.bsky.feed.like", limit, cursor, reverse, cancellationToken);
        }
        /// <summary>
        /// Create a Post record.
        /// </summary>
        public static Task<Result<CreateRecordOutput?>> CreatePostRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, App.Bsky.Feed.Post record, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.CreateRecordAsync(repo, "app.bsky.feed.post", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Delete a Post record.
        /// </summary>
        public static Task<Result<DeleteRecordOutput?>> DeletePostRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, string rkey, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.DeleteRecordAsync(repo, "app.bsky.feed.post", rkey, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Put a Post record.
        /// </summary>
        public static Task<Result<PutRecordOutput?>> PutPostRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, string rkey, App.Bsky.Feed.Post record, bool? validate = default, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.PutRecordAsync(repo, "app.bsky.feed.post", rkey, record, validate, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// List Post records.
        /// </summary>
        public static Task<Result<ListRecordsOutput?>> ListPostRecordsAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ListRecordsAsync(repo, "app.bsky.feed.post", limit, cursor, reverse, cancellationToken);
        }
        /// <summary>
        /// Create a Postgate record.
        /// </summary>
        public static Task<Result<CreateRecordOutput?>> CreatePostgateRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, App.Bsky.Feed.Postgate record, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.CreateRecordAsync(repo, "app.bsky.feed.postgate", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Delete a Postgate record.
        /// </summary>
        public static Task<Result<DeleteRecordOutput?>> DeletePostgateRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, string rkey, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.DeleteRecordAsync(repo, "app.bsky.feed.postgate", rkey, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Put a Postgate record.
        /// </summary>
        public static Task<Result<PutRecordOutput?>> PutPostgateRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, string rkey, App.Bsky.Feed.Postgate record, bool? validate = default, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.PutRecordAsync(repo, "app.bsky.feed.postgate", rkey, record, validate, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// List Postgate records.
        /// </summary>
        public static Task<Result<ListRecordsOutput?>> ListPostgateRecordsAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ListRecordsAsync(repo, "app.bsky.feed.postgate", limit, cursor, reverse, cancellationToken);
        }
        /// <summary>
        /// Create a Repost record.
        /// </summary>
        public static Task<Result<CreateRecordOutput?>> CreateRepostRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, App.Bsky.Feed.Repost record, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.CreateRecordAsync(repo, "app.bsky.feed.repost", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Delete a Repost record.
        /// </summary>
        public static Task<Result<DeleteRecordOutput?>> DeleteRepostRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, string rkey, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.DeleteRecordAsync(repo, "app.bsky.feed.repost", rkey, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Put a Repost record.
        /// </summary>
        public static Task<Result<PutRecordOutput?>> PutRepostRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, string rkey, App.Bsky.Feed.Repost record, bool? validate = default, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.PutRecordAsync(repo, "app.bsky.feed.repost", rkey, record, validate, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// List Repost records.
        /// </summary>
        public static Task<Result<ListRecordsOutput?>> ListRepostRecordsAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ListRecordsAsync(repo, "app.bsky.feed.repost", limit, cursor, reverse, cancellationToken);
        }
        /// <summary>
        /// Create a Threadgate record.
        /// </summary>
        public static Task<Result<CreateRecordOutput?>> CreateThreadgateRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, App.Bsky.Feed.Threadgate record, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.CreateRecordAsync(repo, "app.bsky.feed.threadgate", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Delete a Threadgate record.
        /// </summary>
        public static Task<Result<DeleteRecordOutput?>> DeleteThreadgateRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, string rkey, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.DeleteRecordAsync(repo, "app.bsky.feed.threadgate", rkey, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Put a Threadgate record.
        /// </summary>
        public static Task<Result<PutRecordOutput?>> PutThreadgateRecordAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, string rkey, App.Bsky.Feed.Threadgate record, bool? validate = default, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.PutRecordAsync(repo, "app.bsky.feed.threadgate", rkey, record, validate, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// List Threadgate records.
        /// </summary>
        public static Task<Result<ListRecordsOutput?>> ListThreadgateRecordsAsync(this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ListRecordsAsync(repo, "app.bsky.feed.threadgate", limit, cursor, reverse, cancellationToken);
        }
    }
}

