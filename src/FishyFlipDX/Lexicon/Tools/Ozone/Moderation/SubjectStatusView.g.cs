// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable

namespace FishyFlip.Lexicon.Tools.Ozone.Moderation
{
    public partial class SubjectStatusView : ATObject
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="SubjectStatusView"/> class.
        /// </summary>
        public SubjectStatusView()
        {
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="SubjectStatusView"/> class.
        /// </summary>
        public SubjectStatusView(CBORObject obj)
        {
            if (obj["id"] is not null) this.Id = obj["id"].AsInt64Value();
            if (obj["subject"] is not null) this.Subject = obj["subject"].ToATObject();
            if (obj["hosting"] is not null) this.Hosting = obj["hosting"].ToATObject();
            if (obj["subjectBlobCids"] is not null) this.SubjectBlobCids = obj["subjectBlobCids"].Values.Select(n => n is not null ? n.AsString() : default).ToList();
            if (obj["subjectRepoHandle"] is not null) this.SubjectRepoHandle = obj["subjectRepoHandle"].AsString();
            if (obj["updatedAt"] is not null) this.UpdatedAt = obj["updatedAt"].ToDateTime();
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["reviewState"] is not null) this.ReviewState = obj["reviewState"].AsString();
            if (obj["comment"] is not null) this.Comment = obj["comment"].AsString();
            if (obj["muteUntil"] is not null) this.MuteUntil = obj["muteUntil"].ToDateTime();
            if (obj["muteReportingUntil"] is not null) this.MuteReportingUntil = obj["muteReportingUntil"].ToDateTime();
            if (obj["lastReviewedBy"] is not null) this.LastReviewedBy = obj["lastReviewedBy"].ToATDid();
            if (obj["lastReviewedAt"] is not null) this.LastReviewedAt = obj["lastReviewedAt"].ToDateTime();
            if (obj["lastReportedAt"] is not null) this.LastReportedAt = obj["lastReportedAt"].ToDateTime();
            if (obj["lastAppealedAt"] is not null) this.LastAppealedAt = obj["lastAppealedAt"].ToDateTime();
            if (obj["takendown"] is not null) this.Takendown = obj["takendown"].AsBoolean();
            if (obj["appealed"] is not null) this.Appealed = obj["appealed"].AsBoolean();
            if (obj["suspendUntil"] is not null) this.SuspendUntil = obj["suspendUntil"].ToDateTime();
            if (obj["tags"] is not null) this.Tags = obj["tags"].Values.Select(n => n is not null ? n.AsString() : default).ToList();
        }

        [JsonPropertyName("id")]
        [JsonRequired]
        public long? Id { get; set; }

        [JsonPropertyName("subject")]
        [JsonRequired]
        public ATObject? Subject { get; set; }

        [JsonPropertyName("hosting")]
        public ATObject? Hosting { get; set; }

        [JsonPropertyName("subjectBlobCids")]
        public List<string?>? SubjectBlobCids { get; set; }

        [JsonPropertyName("subjectRepoHandle")]
        public string? SubjectRepoHandle { get; set; }

        /// <summary>
        /// Timestamp referencing when the last update was made to the moderation status of the subject
        /// </summary>
        [JsonPropertyName("updatedAt")]
        [JsonRequired]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Timestamp referencing the first moderation status impacting event was emitted on the subject
        /// </summary>
        [JsonPropertyName("createdAt")]
        [JsonRequired]
        public DateTime? CreatedAt { get; set; }

        [JsonPropertyName("reviewState")]
        [JsonRequired]
        public string? ReviewState { get; set; }

        /// <summary>
        /// Sticky comment on the subject.
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get; set; }

        [JsonPropertyName("muteUntil")]
        public DateTime? MuteUntil { get; set; }

        [JsonPropertyName("muteReportingUntil")]
        public DateTime? MuteReportingUntil { get; set; }

        [JsonPropertyName("lastReviewedBy")]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATDidJsonConverter))]
        public FishyFlip.Models.ATDid? LastReviewedBy { get; set; }

        [JsonPropertyName("lastReviewedAt")]
        public DateTime? LastReviewedAt { get; set; }

        [JsonPropertyName("lastReportedAt")]
        public DateTime? LastReportedAt { get; set; }

        /// <summary>
        /// Timestamp referencing when the author of the subject appealed a moderation action
        /// </summary>
        [JsonPropertyName("lastAppealedAt")]
        public DateTime? LastAppealedAt { get; set; }

        [JsonPropertyName("takendown")]
        public bool? Takendown { get; set; }

        /// <summary>
        /// True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.
        /// </summary>
        [JsonPropertyName("appealed")]
        public bool? Appealed { get; set; }

        [JsonPropertyName("suspendUntil")]
        public DateTime? SuspendUntil { get; set; }

        [JsonPropertyName("tags")]
        public List<string?>? Tags { get; set; }

        /// <summary>
        /// Gets the ATRecord Type.
        /// </summary>
        [JsonPropertyName("$type")]
        public override string Type => "tools.ozone.moderation.defs#subjectStatusView";

        public const string RecordType = "tools.ozone.moderation.defs#subjectStatusView";

        public override string ToJson()
        {
            return JsonSerializer.Serialize<Tools.Ozone.Moderation.SubjectStatusView>(this, (JsonTypeInfo<Tools.Ozone.Moderation.SubjectStatusView>)SourceGenerationContext.Default.ToolsOzoneModerationSubjectStatusView)!;
        }

        public static SubjectStatusView FromJson(string json)
        {
            return JsonSerializer.Deserialize<Tools.Ozone.Moderation.SubjectStatusView>(json, (JsonTypeInfo<Tools.Ozone.Moderation.SubjectStatusView>)SourceGenerationContext.Default.ToolsOzoneModerationSubjectStatusView)!;
        }
    }
}

